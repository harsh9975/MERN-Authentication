{"ast":null,"code":"import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nconst backendURL = 'http://192.168.0.214:8000';\nexport const userLogin = createAsyncThunk('user/login', async (_ref, _ref2) => {\n  let {\n    email,\n    password\n  } = _ref;\n  let {\n    rejectWithValue\n  } = _ref2;\n  try {\n    // configure header's Content-Type as JSON\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post(`${backendURL}/api/user/login`, {\n      email,\n      password\n    }, config);\n\n    // store user's token in local storage\n    console.log(data);\n    localStorage.setItem('token', data.token);\n    localStorage.setItem('userInfo', JSON.stringify(data.user));\n    return data;\n  } catch (error) {\n    // return custom error message from API if any\n    if (error.response && error.response.data.message) {\n      return rejectWithValue(error.response.data.message);\n    } else {\n      return rejectWithValue(error.message);\n    }\n  }\n});\nexport const registerUser = createAsyncThunk('user/register', async (_ref3, _ref4) => {\n  let {\n    name,\n    email,\n    password,\n    password_confirm,\n    tc\n  } = _ref3;\n  let {\n    rejectWithValue\n  } = _ref4;\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    await axios.post(`${backendURL}/api/user/register`, {\n      name,\n      email,\n      password,\n      password_confirm,\n      tc\n    }, config);\n  } catch (error) {\n    if (error.response && error.response.data.message) {\n      return rejectWithValue(error.response.data.message);\n    } else {\n      return rejectWithValue(error.message);\n    }\n  }\n});","map":{"version":3,"names":["axios","createAsyncThunk","backendURL","userLogin","email","password","rejectWithValue","config","headers","data","post","console","log","localStorage","setItem","token","JSON","stringify","user","error","response","message","registerUser","name","password_confirm","tc"],"sources":["/Users/harish/Desktop/project/meet-clone/frontend/src/features/auth/authActions.js"],"sourcesContent":["import axios from 'axios'\nimport { createAsyncThunk } from '@reduxjs/toolkit'\n\nconst backendURL = 'http://192.168.0.214:8000'\n\nexport const userLogin = createAsyncThunk(\n    'user/login',\n    async ({ email, password }, { rejectWithValue }) => {\n      try {\n        // configure header's Content-Type as JSON\n        const config = {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n  \n        const { data } = await axios.post(\n          `${backendURL}/api/user/login`,\n          { email, password },\n          config\n        )\n  \n        // store user's token in local storage\n        console.log(data)\n        localStorage.setItem('token', data.token)\n        localStorage.setItem('userInfo', JSON.stringify(data.user))\n  \n        return data\n      } catch (error) {\n        // return custom error message from API if any\n        if (error.response && error.response.data.message) {\n          return rejectWithValue(error.response.data.message)\n        } else {\n          return rejectWithValue(error.message)\n        }\n      }\n    }\n  )\n\n  export const registerUser = createAsyncThunk(\n    'user/register',\n    async ({ name, email, password,password_confirm,tc }, { rejectWithValue }) => {\n      try {\n        const config = {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n  \n        await axios.post(\n          `${backendURL}/api/user/register`,\n          { name, email, password,password_confirm,tc },\n          config\n        )\n      } catch (error) {\n        if (error.response && error.response.data.message) {\n          return rejectWithValue(error.response.data.message)\n        } else {\n          return rejectWithValue(error.message)\n        }\n      }\n    }\n  )"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,QAAQ,kBAAkB;AAEnD,MAAMC,UAAU,GAAG,2BAA2B;AAE9C,OAAO,MAAMC,SAAS,GAAGF,gBAAgB,CACrC,YAAY,EACZ,uBAAoD;EAAA,IAA7C;IAAEG,KAAK;IAAEC;EAAS,CAAC;EAAA,IAAE;IAAEC;EAAgB,CAAC;EAC7C,IAAI;IACF;IACA,MAAMC,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC;IAED,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMT,KAAK,CAACU,IAAI,CAC9B,GAAER,UAAW,iBAAgB,EAC9B;MAAEE,KAAK;MAAEC;IAAS,CAAC,EACnBE,MAAM,CACP;;IAED;IACAI,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACjBI,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,IAAI,CAACM,KAAK,CAAC;IACzCF,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEE,IAAI,CAACC,SAAS,CAACR,IAAI,CAACS,IAAI,CAAC,CAAC;IAE3D,OAAOT,IAAI;EACb,CAAC,CAAC,OAAOU,KAAK,EAAE;IACd;IACA,IAAIA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACX,IAAI,CAACY,OAAO,EAAE;MACjD,OAAOf,eAAe,CAACa,KAAK,CAACC,QAAQ,CAACX,IAAI,CAACY,OAAO,CAAC;IACrD,CAAC,MAAM;MACL,OAAOf,eAAe,CAACa,KAAK,CAACE,OAAO,CAAC;IACvC;EACF;AACF,CAAC,CACF;AAED,OAAO,MAAMC,YAAY,GAAGrB,gBAAgB,CAC1C,eAAe,EACf,wBAA8E;EAAA,IAAvE;IAAEsB,IAAI;IAAEnB,KAAK;IAAEC,QAAQ;IAACmB,gBAAgB;IAACC;EAAG,CAAC;EAAA,IAAE;IAAEnB;EAAgB,CAAC;EACvE,IAAI;IACF,MAAMC,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC;IAED,MAAMR,KAAK,CAACU,IAAI,CACb,GAAER,UAAW,oBAAmB,EACjC;MAAEqB,IAAI;MAAEnB,KAAK;MAAEC,QAAQ;MAACmB,gBAAgB;MAACC;IAAG,CAAC,EAC7ClB,MAAM,CACP;EACH,CAAC,CAAC,OAAOY,KAAK,EAAE;IACd,IAAIA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACX,IAAI,CAACY,OAAO,EAAE;MACjD,OAAOf,eAAe,CAACa,KAAK,CAACC,QAAQ,CAACX,IAAI,CAACY,OAAO,CAAC;IACrD,CAAC,MAAM;MACL,OAAOf,eAAe,CAACa,KAAK,CAACE,OAAO,CAAC;IACvC;EACF;AACF,CAAC,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}